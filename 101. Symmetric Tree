/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
void inol(TreeNode* root,vector<int> &ino){
    if(root){

        ino.push_back(root->val);
        inol(root->left,ino);
        inol(root->right,ino);

    }
    else
    ino.push_back(-101);
}
void inor(TreeNode* root,vector<int> &ino){
    if(root){

        ino.push_back(root->val);
        inor(root->right,ino);
        inor(root->left,ino);

    }
    else
    ino.push_back(-101);//so that we can also check mirror images of null values
}
/*void print(vector<int> v){
    for(auto i:v){
        cout<<i<<" ";
    }
    cout<<endl;
}*/
    bool isSymmetric(TreeNode* root) {
        vector<int> left;
        vector<int> right;
        inol(root->left,left);//gives the left image
        inor(root->right,right);//gives the right image
        //print(left);
       // print(right);
        if(left==right)
        return true;
        else return false;
    }
};
